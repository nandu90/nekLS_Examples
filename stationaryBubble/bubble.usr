      include "experimental/lvlSet.f"
      include "lineplot.f"
      include "experimental/lserrors.f"
      
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      integer ix,iy,iz,eg,e
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real Re, We, Fr, rhoratio, muratio
      real udim, charl, rhol, mul, gdim, gamm
      real nul, nug
      real rhog,mug
      real psi
      integer icalld
      save icalld
      data icalld /0/

      common /dimen/ Re,We,Fr

      e = gllel(eg)

!     These routine is not called by external solver
!     To Do: change the flow, so that this routine is called
!     similar to RANS. Will avoid confusion

      rhol = 1.0
      rhog = 1.0
      mul = 1.0
      mug = 1.0 !/5.0

      Re = 10.0
      We = 1.0
      !Laplace number = Re**2/We

      if(ifield.eq.1)then
        psi = t(ix,iy,iz,e,ifld_cls-1)
        psi = max(0.0,psi)
        psi = min(1.0,psi)
        utrans = ((1.0-psi)*rhog + psi*rhol)/rhol
        udiff = ((1.0-psi)*mug + psi*mul)/mul/Re
        if(istep.le.2)then
          vtrans0(ix,iy,iz,e) = utrans
        else
          vtrans0(ix,iy,iz,e) = rhog/rhol
        endif
      else
        utrans = 1.0
        udiff = 1e-10
        if(ifavm(ifield-1))then
          udiff = 1e-10       !must be tiny for hyperbolic
        elseif(ifsvv(ifield-1))then
          udiff = 1e-10      !must be tiny for hyperbolic
        endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /dimen/ Re,We,Fr
      real Re,We,Fr
      real sfx,sfy,sfz
      real sffx,sffy,sffz

      real svvx,svvy,svvz

      e = gllel(eg)

      sfx = 0.0
      sfy = 0.0
      sfz = 0.0
      svvx = 0.0
      svvy = 0.0
      svvz = 0.0

      call surfacetension(ix,iy,iz,e,1./We,sfx,sfy,sfz)
      
      call svv_fluid(ix,iy,iz,e,svvx,svvy,svvz)

      ffx = sfx !+ svvx
      ffy = sfy !+ svvy
      ffz = sfz !+ svvz

      sffx = sfx * vtrans(ix,iy,iz,e,1)
      sffy = sfy * vtrans(ix,iy,iz,e,1)
      sffz = sfz * vtrans(ix,iy,iz,e,1)
      t(ix,iy,iz,e,5) = sffx**2+sffy**2
      if(if3d) t(ix,iy,iz,e,5) = t(ix,iy,iz,e,5)+sffz**2
      t(ix,iy,iz,e,5) = sqrt(t(ix,iy,iz,e,5))

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      real signls

      e = gllel(eg)
      
      qvol = 0.0
      avol = 0.0

      call limit_cls(ix,iy,iz,e)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer e
      real yplus

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real xx,yy,zz,heaviside
      real phix,phiy

      e = gllel(eg)

      xx = xm1(ix,iy,iz,e)
      yy = ym1(ix,iy,iz,e)
      zz = zm1(ix,iy,iz,e)

      ux = 0.0
      uy = 0.0
      uz = 0.0

      temp = xx**2 + yy**2
      if(if3d) temp = temp + zz**2
      temp = sqrt(temp)-0.5
      if(ifield.eq.ifld_tls .or. ifield.eq.ifld_tlsr)then
        continue
      elseif(ifield.eq.ifld_cls .or. ifield.eq.ifld_clsr)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real ntlsr, nclsr
      real pta(3),ptb(3)

      integer ntot,i
      integer pord
      integer ncut

      common /rms/ urms(lx1,ly1,lz1,lelv),
     $             vmag(lx1,ly1,lz1,lelv),
     $             curv(lx1,ly1,lz1,lelv),
     $             curvi(lx1,ly1,lz1,lelv),
     $             delta(lx1,ly1,lz1,lelv),
     $             cx(lx1,ly1,lz1,lelv),
     $             cy(lx1,ly1,lz1,lelv),
     $             cz(lx1,ly1,lz1,lelv)
      real urms,vmag
      real rms
      real curv, curvi
      real glsum, glsc3, glsc2
      real delta, cx,cy,cz
      real e1norm, e2norm, glmax

      common /dimen/ Re,We,Fr
      real Re,We,Fr

      real Ca

      ntot = lx1*ly1*lz1*nelv

      if(istep.eq.0 .and. nio.eq.0)then
        open(unit=100,file='rms.dat',status='unknown')
      endif

      pord = uparam(3)
      call extrappr(prext,pr,prlag(1,1,1,1,1),prlag(1,1,1,1,2),pord)
      ! ncut = lx1-2
      ! if(pord.ne.1) call cut_off_filter(prext,ncut,1)

      !Get RMS velocity
      call col3(urms,vx,vx,ntot)
      call addcol3(urms,vy,vy,ntot)
      if(if3d) call addcol3(urms,vz,vz,ntot)
      call vsqrt2(vmag,urms,ntot)
      Ca = (We/Re)*glmax(vmag,ntot)
      call col2(urms,bm1,ntot)
      rms = sqrt(glsum(urms,ntot)/volvm1)

      !Get curvature
      call cls_normals(cx,cy,cz,ifld_tls)
      call opdiv(curv,cx,cy,cz)
      call dssum(curv,lx1,ly1,lz1)
      call col2(curv,binvm1,ntot)

      call deltals(t(1,1,1,1,ifld_cls-1),delta)
      call col2(curv,delta,ntot)
      if(istep.eq.0)call copy(curvi,curv,ntot)
      !Calc error in curv
      call sub2(curv,curvi,ntot)
      call vabs(curv,ntot)
      e1norm = glsc2(curv,bm1,ntot)
      e2norm = glsc3(curv,curv,bm1,ntot)
      e2norm = sqrt(e2norm)
      

      if(nio.eq.0)then 
        write(*,*)"RMS velocity",rms
        write(*,*)"Capillary number",Ca
        write(*,*)"Curvature err norm",e1norm,e2norm
        write(100,*)time,rms,e1norm,e2norm,Ca
      endif

      if(istep.eq.nsteps .and. nio.eq.0) close(100)

      ntlsr = uparam(1) !freq of TLS re-distancing
      nclsr = uparam(2) !freq of CLS re-distancing

      call LS_default_driver(ntlsr,nclsr)

      ! if(istep .eq. nsteps)then
      !   pta(1) = 0.0
      !   pta(2) = 0.0
      !   pta(3) = 0.0
      !   ptb(1) = 5.0
      !   ptb(2) = 0.0
      !   ptb(3) = 0.0
      !   call lineplot(pta,ptb,1001)
      ! endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      ifld_cls = 2
      ifld_tls = 3
      ifld_clsr = 4
      ifld_tlsr = 5

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'SVV'
      include 'AVM'

      real eps,dt_cls_in,dt_tls_in
      integer nsteps_cls, nsteps_tls

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer ifdebug, ifixCLSbdry

      eps = 1.0/(lx1-1.0)
      ifdebug = 0
      ifixCLSbdry = 0
      call ls_init(ifld_cls, ifld_clsr,
     $             ifld_tls, ifld_tlsr,
     $             eps, ifdebug, ifixCLSbdry)

c---------------------------------------------------      
c     This section to specify user defined parameters
c     for AVM/SVV. Leave commented to use default parameters
c     parameters. 

      !fluid
      ! svv_c0(1) = 1.0
      ! svvcut(1) = (lx1-1.0)/2.0

      ! svv_c0(ifld_cls) = 1.0                 !ifld_cls
      ! svvcut(ifld_cls) = (lx1-1.0)/2.0
      ! svv_k0(1) = 1.5
      ! svv_k1(1) = 1.5
      ! ifnlsvv(1) = .true.

      ! avm_c1(1) = 1.0
      ! avm_ncut(1) = 1.0
      ! icont(1) = .false.
      ! ifupwindsvv(ifld_cls) = .true.

c     scalar 2      
      ! svv_c0(ifld_tls) = 1.0                  !ifld_tls
      ! svvcut(ifld_tls) = (lx1-1.0)/2.0
      ! svv_k0(2) = 1.5
      ! svv_k1(2) = 1.5
      ! ifnlsvv(2) = .false.
      ! ifupwindsvv(ifld_tls) = .true.

c     scalar 3      
      svv_c0(ifld_clsr) = 1.0                  !ifld_clsr
      svvcut(ifld_clsr) = (lx1-1.0)/2.0
      ! svv_k0(3) = 1.5
      ! svv_k1(3) = 1.5
      ! ifnlsvv(3) = .false.
      ! ifupwindsvv(ifld_clsr) = .true.

c     scalar 3      
      svv_c0(ifld_tlsr) = 1.0                  !ifld_tlsr
      svvcut(ifld_tlsr) = (lx1-1.0)/3.0
      ! svv_k0(4) = 1.5
      ! svv_k1(4) = 1.5
      ! ifnlsvv(4) = .false.
      ! ifupwindsvv(ifld_tlsr) = .true.
      
      return
      end
c---------------------------------------------------------------------
      subroutine vabs(a,n)
      real a(1)
      integer n,i

      do i=1,n
        a(i) = abs(a(i))
      enddo
      return
      end
c---------------------------------------------------------------------
      subroutine vsqrt2(a,b,n)
      real a(1),b(1)
      integer n,i

      do i=1,n
        a(i) = sqrt(b(i))
      enddo
      return
      end
