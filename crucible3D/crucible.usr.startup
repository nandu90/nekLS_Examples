      include "experimental/lvlSet.f"
      include "utilities.f"
      include "limits.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      integer ix,iy,iz,eg,e
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real Re, We, Fr, rhoratio, muratio
      real rhol, mul
      real nul, nug
      real rhog,mug
      real psi
      integer icalld
      save icalld
      data icalld /0/

      common /dimen/ charl,gamm,gdim,gfac,udim
      real charl,gamm,gdim,gfac,udim

      real flowrate,areainlet

      e = gllel(eg)

!     These routine is not called by external solver
!     To Do: change the flow, so that this routine is called
!     similar to RANS. Will avoid confusion

      rhol = 970.0
      mul = 1.0
      nul = mul/rhol
      
      rhog = 1.1839
      nug = 1.562e-5
      mug = nug * rhog
      mul = mug * 10.0

      if(ifield.eq.1)then
        psi = t(ix,iy,iz,e,ifld_cls-1)
        psi = max(0.0,psi)
        psi = min(1.0,psi)
        utrans = ((1.0-psi)*rhog + psi*rhol)
        !in non-dimensional form you must have kinematic 
        !viscosity here
        udiff = ((1.0-psi)*mug + psi*mul)
        vtrans0(ix,iy,iz,e) = rhog
      else
        utrans = 1.0
        udiff = 1e-10
        if(ifavm(ifield-1))then
          udiff = 1e-10       !must be tiny for hyperbolic
        elseif(ifsvv(ifield-1))then
          udiff = 1e-10      !must be tiny for hyperbolic
        endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /dimen/ charl,gamm,gdim,gfac,udim
      real charl,gamm,gdim,gfac,udim
      real sfx,sfy,sfz

      real svvx,svvy,svvz

      e = gllel(eg)

      sfx = 0.0
      sfy = 0.0
      sfz = 0.0
      svvx = 0.0
      svvy = 0.0
      svvz = 0.0

      ! call surfacetension(ix,iy,iz,e,gamm,sfx,sfy,sfz)
      
      call svv_fluid(ix,iy,iz,e,svvx,svvy,svvz)

      ffx = -sfx + svvx
      ffy = -sfy + svvy
      ffz = -sfz + svvz - gdim 

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      real signls

      e = gllel(eg)
      
      qvol = 0.0
      avol = 0.0

      if(ifield.eq.ifld_tlsr)then
        qvol = signls(ix,iy,iz,e)
      endif

      call limit_cls(ix,iy,iz,e)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer e

      real xx, yy, zz
      real func
      real injradius, xinj

      common /dimen/ charl,gamm,gdim,gfac,udim
      real charl,gamm,gdim,gfac,udim

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      xx = xm1(ix,iy,iz,e)
      yy = ym1(ix,iy,iz,e)
      zz = zm1(ix,iy,iz,e)

      if(ifield.eq.ifld_clsr)then
        temp = t(ix,iy,iz,e,ifld_cls-1)
      endif

      injradius = charl/2.0 *1e3*gfac
      xinj = sqrt(xx**2.0 + yy**2.0)/injradius
      func = 0.5*(tanh(0.5*PI*(xinj-1.0)))-0.5
      if(cbc(iside,e,1).eq.'v  ')then
        ux = 0.0
        uy = 0.0
        uz = func * udim
      endif

      if(ifield.eq.ifld_cls .or. ifield.eq.ifld_clsr)then
        if(cbc(iside,e,ifld_cls).eq.'t  ' 
     $   .and. cbc(iside,e,1).eq.'v  ')then
          temp = 1.0 + func
        else if(cbc(iside,e,ifld_cls).eq.'t  ')then
          temp = t(ix,iy,iz,e,ifld_cls-1)
          if(zz .lt. 10.0*gfac) temp = 1.0
        endif
      endif

      if(ifield.eq.1)then
        call traction_ls(ix,iy,iz,e,iside)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real xx,yy,heaviside,zz
      real phix,phiz
      real temp2
      real radius

      common /dimen/ charl,gamm,gdim,gfac,udim
      real charl,gamm,gdim,gfac,udim

      e = gllel(eg)

      xx = xm1(ix,iy,iz,e)
      yy = ym1(ix,iy,iz,e)
      zz = zm1(ix,iy,iz,e)

      ux = 0.0
      uy = 0.0
      uz = 0.0

      phiz = 20.0 * gfac - zz
      temp = phiz
      radius = charl/2.0 *1e3*gfac
      temp2 = sqrt((xx)**2.0 + (yy)**2.0 + zz**2.0)-radius
      temp = min(temp,temp2)

      if(ifield.eq.ifld_tls .or. ifield.eq.ifld_tlsr)then
        continue
      elseif(ifield.eq.ifld_cls .or. ifield.eq.ifld_clsr)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
        ! if(xx.le.-radius*2.0 .and.zz .le.10.0)then
        !   temp = 1.0
        ! endif
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer ntlsr, nclsr

      call extrappr(prext,pr,prlag(1,1,1,1,1),prlag(1,1,1,1,2))

      ntlsr = uparam(1) !freq of TLS re-distancing
      nclsr = uparam(2) !freq of CLS re-distancing

      call LS_default_driver(ntlsr,nclsr)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none

      include 'SIZE'
      include 'TOTAL'

      integer iel,ntot,ifc,i,id_face
      real xsum,xavg,asum

      real xmin,xmax,ymin,ymax
      real glmin, glmax
      real inletL, inletL2, theta, rinfluence
      real fac, arm, xx, zz

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      common /dimen/ charl,gamm,gdim,gfac,udim
      real charl,gamm,gdim,gfac,udim

      real flowrate,areainlet

      ifld_cls = 2
      ifld_tls = 3
      ifld_clsr = 4
      ifld_tlsr = 5

      ntot = lx1*ly1*lz1*nelt

      !Dimensionalize mesh
      gfac = 1e-3
      charl = 1.397e-3 !inlet orifice diameter
      gdim = 9.81

      gamm = 0.0216
      
      flowrate = 10.0/60.0 * 1e-6
      areainlet = PI*(charl/2.0)**2.0
      udim = flowrate/areainlet * 5.0

      call cmult(xm1,gfac,ntot)
      call cmult(ym1,gfac,ntot)
      call cmult(zm1,gfac,ntot)

      do iel=1,nelt
        do ifc=1,2*ndim
          id_face = bc(5,ifc,iel,1)
          cbc(ifc,iel,1) = 'E  '
          cbc(ifc,iel,ifld_cls) = 'E  '
          cbc(ifc,iel,ifld_tls) = 'E  '
          cbc(ifc,iel,ifld_clsr) = 'E  '
          cbc(ifc,iel,ifld_tlsr) = 'E  '
          if(id_face.eq.3)then
            cbc(ifc,iel,1) = 'v  '
            cbc(ifc,iel,ifld_cls) = 't  '
            cbc(ifc,iel,ifld_tls) = 'I  '
            cbc(ifc,iel,ifld_clsr) = 't  '
            cbc(ifc,iel,ifld_tlsr) = 'I  '
          elseif(id_face.eq.2)then
            cbc(ifc,iel,1) = 'O  '
            cbc(ifc,iel,ifld_cls) = 'I  '
            cbc(ifc,iel,ifld_tls) = 'I  '
            cbc(ifc,iel,ifld_clsr) = 'I  '
            cbc(ifc,iel,ifld_tlsr) = 'I  '
          elseif(id_face.eq.1)then
            cbc(ifc,iel,1) = 'W  '
            cbc(ifc,iel,ifld_cls) = 't  '
            cbc(ifc,iel,ifld_tls) = 'I  '
            cbc(ifc,iel,ifld_clsr) = 't  '
            cbc(ifc,iel,ifld_tlsr) = 'I  '
          elseif(id_face.eq.4)then
            cbc(ifc,iel,1) = 'W  '
            cbc(ifc,iel,ifld_cls) = 't  '
            cbc(ifc,iel,ifld_tls) = 'I  '
            cbc(ifc,iel,ifld_clsr) = 't  '
            cbc(ifc,iel,ifld_tlsr) = 'I  '
          elseif(id_face.eq.5)then
            cbc(ifc,iel,1) = 'W  '
            cbc(ifc,iel,ifld_cls) = 't  '
            cbc(ifc,iel,ifld_tls) = 'I  '
            cbc(ifc,iel,ifld_clsr) = 't  '
            cbc(ifc,iel,ifld_tlsr) = 'I  '
          endif
        enddo
      enddo
      
      call count_boundaries
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'AVM'
      include 'SVV'

      real eps,dt_cls_in,dt_tls_in
      integer nsteps_cls, nsteps_tls

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer ifdebug
      integer ifixCLSbdry

      eps = 4.0/(lx1-1.0)
      ! nsteps_cls = uparam(1)
      ! nsteps_tls = uparam(2)
      ! dt_cls_in = dt * uparam(3)
      ! dt_tls_in = dt * uparam(4)
      ifdebug = 0
      ifixCLSbdry = 0
      

      call ls_init(ifld_cls, ifld_clsr,
     $             ifld_tls, ifld_tlsr,
     $             eps, ifdebug, ifixCLSbdry)

      ! call ls_init2(nsteps_cls,nsteps_tls,eps,
      ! $             dt_cls_in,dt_tls_in,
      ! $             ifld_cls,ifld_clsr,
      ! $             ifld_tls,ifld_tlsr,ifdebug,ifixCLSbdry)

c---------------------------------------------------      
c     This section to specify user defined parameters
c     for AVM/SVV. Leave commented to use default parameters
c     parameters. 

      !fluid
      svv_c0(1) = 5.0

      svv_c0(ifld_cls) = 2.0                 !ifld_cls
      ! svvcut(ifld_cls) = (lx1-1.0)/2.0-1.0
      ! svv_k0(1) = 1.5
      ! svv_k1(1) = 1.5
      ! ifnlsvv(1) = .true.

      ! avm_c1(1) = 1.0
      ! avm_ncut(1) = 1.0
      ! icont(1) = .false.
      ifupwindsvv(ifld_cls) = .true.

c     scalar 2      
      svv_c0(ifld_tls) = 2.0                  !ifld_tls
      ! svvcut(ifld_tls) = (lx1-1.0)/2.0-1.0
      ! svv_k0(2) = 1.5
      ! svv_k1(2) = 1.5
      ! ifnlsvv(2) = .false.
      ifupwindsvv(ifld_tls) = .true.

c     scalar 3      
      svv_c0(ifld_clsr) = 1.0                  !ifld_clsr
      ! svvcut(ifld_clsr) = (lx1-1.0)/2.0-1.0
      ! svv_k0(3) = 1.5
      ! svv_k1(3) = 1.5
      ! ifnlsvv(3) = .false.
      ! ifupwindsvv(ifld_clsr) = .true.

c     scalar 3      
      svv_c0(ifld_tlsr) = 2.0                  !ifld_tlsr
      svvcut(ifld_tlsr) = (lx1-1.0)/2.0-1.0
      ! svv_k0(4) = 1.5
      ! svv_k1(4) = 1.5
      ! ifnlsvv(4) = .false.
      ! ifupwindsvv(ifld_tlsr) = .true.
      
      return
      end
c---------------------------------------------------------------------
      subroutine extrappr(pe,p,plag,plag1)
C
C     Pressure extrapolation
C
      INCLUDE 'SIZE'
      INCLUDE 'SOLN'
      INCLUDE 'TSTEP'

      real  p    (lx2,ly2,lz2,1)
     $     ,pe   (lx2,ly2,lz2,1)
     $     ,plag (lx2,ly2,lz2,1)
     $     ,plag1(lx2,ly2,lz2,1)

      iord_ext = 1
      istp_str = 10
      ntot2 = lx2*ly2*lz2*nelv

      dt0 = dtlag(1)
      dt1 = dtlag(2)
      dt2 = dtlag(3)

      dts =  dt1 + dt2
      dta =  dt0 / dt1
      dtb =  dt1 / dt2
      dtc =  dt0 / dt2
      dtd =  dts / dt1
      dte =  dt0 / dts
C
      if     (istep.le.istp_str.and. nbd.le.3 .or. iord_ext.eq.1) then

         call copy(pe,  p,ntot2)

      elseif (istep.gt.istp_str.and. nbd.le.3 .and. iord_ext.eq.2) then

         const = dt0/dt1

         do i=1,ntot2
            pn            = p   (i,1,1,1)
            pnm1          = plag(i,1,1,1)
            pe  (i,1,1,1) = pn   + const*(pn  -pnm1)
         enddo

      elseif (istep.gt.10.and. nbd.le.3 .and. iord_ext.eq.3) then

         const3=  dte*(dtb + dtc)
         const2= -dta*(1.0 + dtb + dtc)
         const1=  1.0 - const2 - const3

         do i=1,ntot2
            pn            = p    (i,1,1,1)
            pnm1          = plag (i,1,1,1)
            pnm2          = plag1(i,1,1,1)
            pe  (i,1,1,1) = const1*pn + const2*pnm1 - const3*pnm2
         enddo

      elseif (nbd.gt.3) then
         WRITE (6,*) 'Pressure extrapolation cannot be completed'
         WRITE (6,*) 'Try a lower-order temporal scheme'
         call exitt
      endif

  3   format(A,1p4e17.9,I4)

      return
      end
