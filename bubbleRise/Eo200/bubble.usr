      include "experimental/lvlSet.f"
      include "experimental/lserrors.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      integer ix,iy,iz,eg,e
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real Ga, Eo, Fr, rhoratio, muratio
      real nuratio
      real psi
      integer icalld
      save icalld
      data icalld /0/

      common /dimen/ Ga,Eo,Fr

      e = gllel(eg)

!     These routine is not called by external solver
!     To Do: change the flow, so that this routine is called
!     similar to RANS. Will avoid confusion

      rhoratio = 1e-3
      muratio = 1e-2
      nuratio = muratio/rhoratio

      Ga = 70.7
      Fr = 1.0
      Eo = 200.0

      if(ifield.eq.1)then
        psi = t(ix,iy,iz,e,ifld_cls-1)
        psi = max(0.0,psi)
        psi = min(1.0,psi)
        utrans = (1.0-psi)*rhoratio + psi
        !in non-dimensional form you must have kinematic 
        !viscosity here
        udiff = ((1.0-psi)*muratio + psi)/Ga
        if(istep.le.2)then
          vtrans0(ix,iy,iz,e) = utrans
        else
          vtrans0(ix,iy,iz,e) = rhoratio
        endif
      else
        utrans = 1.0
        udiff = 1e-10
        if(ifavm(ifield-1))then
          udiff = 1e-10       !must be tiny for hyperbolic
        elseif(ifsvv(ifield-1))then
          udiff = 1e-10      !must be tiny for hyperbolic
        endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /dimen/ Ga,Eo,Fr
      real Ga,Eo,Fr
      real sfx,sfy,sfz

      real svvx,svvy,svvz

      real dpdz,rhol

      real sffx,sffy,sffz

      e = gllel(eg)

      sfx = 0.0
      sfy = 0.0
      sfz = 0.0
      svvx = 0.0
      svvy = 0.0
      svvz = 0.0

      call surfacetension(ix,iy,iz,e,1./Eo,sfx,sfy,sfz)
      
      call svv_fluid(ix,iy,iz,e,svvx,svvy,svvz)

      ffx = sfx + svvx
      ffy = sfy + svvy 
      ffz = sfz + svvz - 1.0/Fr

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      real signls

      e = gllel(eg)
      
      qvol = 0.0
      avol = 0.0

      call limit_cls(ix,iy,iz,e)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer e
      real yplus

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if(ifield.eq.ifld_clsr.or.ifield.eq.ifld_cls)then
        temp = 1.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real xx,yy,heaviside,zz

      e = gllel(eg)

      xx = xm1(ix,iy,iz,e)
      yy = ym1(ix,iy,iz,e)
      zz = zm1(ix,iy,iz,e)

      ux = 0.0
      uy = 0.0
      uz = 0.0

      temp = sqrt(xx**2.0+(yy)**2.0+(zz-8.0)**2.0)-1.0
      if(ifield.eq.ifld_tls .or. ifield.eq.ifld_tlsr)then
        continue
      elseif(ifield.eq.ifld_cls .or. ifield.eq.ifld_clsr)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real ntlsr, nclsr
      real pta(3),ptb(3)

      integer ntot,i

      real exact(lx1*ly1*lz1*lelv)
      save exact
      real psiini(lx1,ly1,lz1,lelv)
      save psiini
      real err
      
      real ls_volerr
      real rhol,ymax,glmax
      integer pord
      real vel
      real enclosedVol, enclosedVolInt
      real vol

      ntot = lx1*ly1*lz1*nelv

      if(istep.eq.0)then
        call getexact(psiini,exact)
      endif
      if(istep.eq.0 .and. nio.eq.0)then
        open(unit=100,file='vol.dat',status='unknown')
        open(unit=200,file='vel.dat',status='unknown')
      endif

      pord = 2
      call extrappr(prext,pr,prlag(1,1,1,1,1),prlag(1,1,1,1,2),pord)

      ntlsr = uparam(1) !freq of TLS re-distancing
      nclsr = uparam(2) !freq of CLS re-distancing

      call usrclearfarfield
      call LS_default_driver(ntlsr,nclsr)

      err = ls_volerr(ifld_cls,exact,psiini)
      vol = enclosedVol(t(1,1,1,1,ifld_cls-1),-1)
      vel = enclosedVolInt(t(1,1,1,1,ifld_cls-1),vz,-1)
      vel = vel/vol

      if(nio.eq.0)then 
        write(*,*)"Volume error",err
        write(*,*)"Rise velocity",vel
        write(*,*)"Enclosed Vol",vol
        write(100,*)time,err
        write(200,*)time,vel
      endif

      if(istep.eq.nsteps .and. nio.eq.0) close(100)
      if(istep.eq.nsteps .and. nio.eq.0) close(200)

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      integer ie,ifc

      ifld_cls = 2
      ifld_tls = 3
      ifld_clsr = 4
      ifld_tlsr = 5

      do ie=1,nelt
        do ifc=1,2*ndim
          if(bc(5,ifc,ie,1).eq.1346)then
            cbc(ifc,ie,1) = 'SYM'
            cbc(ifc,ie,ifld_cls) = 't  '
            cbc(ifc,ie,ifld_tls) = 'I  '
            cbc(ifc,ie,ifld_clsr) = 't  '
            cbc(ifc,ie,ifld_tlsr) = 'I  '
          elseif(bc(5,ifc,ie,1).eq.1345)then
            cbc(ifc,ie,1) = 'W  '
            cbc(ifc,ie,ifld_cls) = 't  '
            cbc(ifc,ie,ifld_tls) = 'I  '
            cbc(ifc,ie,ifld_clsr) = 't  '
            cbc(ifc,ie,ifld_tlsr) = 'I  '
          elseif(bc(5,ifc,ie,1).eq.1344)then
            cbc(ifc,ie,1) = 'O  '
            cbc(ifc,ie,ifld_cls) = 't  '
            cbc(ifc,ie,ifld_tls) = 'I  '
            cbc(ifc,ie,ifld_clsr) = 't  '
            cbc(ifc,ie,ifld_tlsr) = 'I  '
          endif
        enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'SVV'
      include 'AVM'

      real eps,dt_cls_in,dt_tls_in
      integer nsteps_cls, nsteps_tls

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer ifdebug, ifixCLSbdry
      integer ntlsr_max,nclsr_max

      eps = 1.0/(lx1-1.0)/4.0
      ifdebug = 0
      ifixCLSbdry = 0
      ntlsr_max = 200
      nclsr_max = 20
      call ls_init_maxiter(ifld_cls, ifld_clsr,
     $             ifld_tls, ifld_tlsr,
     $             eps, ifdebug, ifixCLSbdry,
     $             ntlsr_max,nclsr_max)

c---------------------------------------------------      
c     This section to specify user defined parameters
c     for AVM/SVV. Leave commented to use default parameters
c     parameters. 

      !fluid
      ! svv_c0(1) = 1.0
      ! svvcut(1) = (lx1-1.0)/2.0

      ! svv_c0(ifld_cls) = 1.0                 !ifld_cls
      ! svvcut(ifld_cls) = (lx1-1.0)/2.0
      ! svv_k0(1) = 1.5
      ! svv_k1(1) = 1.5
      ! ifnlsvv(1) = .true.

      ! avm_c1(1) = 1.0
      ! avm_ncut(1) = 1.0
      ! icont(1) = .false.
      ! ifupwindsvv(ifld_cls) = .true.

c     scalar 2      
      ! svv_c0(ifld_tls) = 1.0                  !ifld_tls
      ! svvcut(ifld_tls) = (lx1-1.0)/2.0
      ! svv_k0(2) = 1.5
      ! svv_k1(2) = 1.5
      ! ifnlsvv(2) = .false.
      ! ifupwindsvv(ifld_tls) = .true.

c     scalar 3      
      svv_c0(ifld_clsr) = 1.0                  !ifld_clsr
      svvcut(ifld_clsr) = (lx1-1.0)/2.0
      ! svv_k0(3) = 1.5
      ! svv_k1(3) = 1.5
      ! ifnlsvv(3) = .false.
      ! ifupwindsvv(ifld_clsr) = .true.

c     scalar 3      
      svv_c0(ifld_tlsr) = 1.0                  !ifld_tlsr
      svvcut(ifld_tlsr) = (lx1-1.0)/3.0
      ! svv_k0(4) = 1.5
      ! svv_k1(4) = 1.5
      ! ifnlsvv(4) = .false.
      ! ifupwindsvv(ifld_tlsr) = .true.

      ! avm_ncut(ifld_tlsr) = 2
      ! avm_c1(ifld_tlsr) = 2.0
      ! ifcont(ifld_tlsr) = .true.

      return
      end
c---------------------------------------------------------------------
      subroutine usrclearfarfield
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      integer i,ntot
      real xx,yy,zz

      ntot = lx1*ly1*lz1*nelv

      do i=1,ntot
        xx = xm1(i,1,1,1)
        yy = ym1(i,1,1,1)
        zz = zm1(i,1,1,1)
        if(abs(xx).gt.2.0 .or. abs(yy).gt.2.0
     $   .or. zz.lt.7.0)then
          t(i,1,1,1,ifld_cls-1) = 1.0
          t(i,1,1,1,ifld_clsr-1) = 1.0
        endif
      enddo

      return
      end
c---------------------------------------------------------------------
      subroutine getexact(psi,exact)
      include 'SIZE'
      include 'TOTAL'

      real psi(1),exact(1)
      integer ntot
      real xx,yy,zz
      real temp

      ntot = lx1*ly1*lz1*nelv

      do i=1,ntot
        xx = xm1(i,1,1,1)
        yy = ym1(i,1,1,1)
        zz = zm1(i,1,1,1)

        temp = sqrt(xx**2.0+(yy)**2.0+(zz-8.0)**2.0)-1.0
        psi(i) = heaviside(i,1,1,1,temp,0.0)
        if(psi(i).ge.0.0)then
          exact(i) = 1.0
        else
          exact(i) = 0.0
        endif
      enddo

      return
      end
