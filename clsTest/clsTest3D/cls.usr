      include "experimental/lvlSet.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      integer ix,iy,iz,eg,e
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      e = gllel(eg)

!     These routine is not called by external solver
!     To Do: change the flow, so that this routine is called
!     similar to RANS. Will avoid confusion

      utrans = 1.0
      udiff = cpfld(ifield,1)

      if(ifavm(ifield-1))then
        udiff = 1e-10       !must be tiny for hyperbolic
      elseif(ifsvv(ifield-1))then
        udiff = 1e-10      !must be tiny for hyperbolic
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      real signls

      e = gllel(eg)
      
      qvol   = 0.0
      avol = 0.0

      if(ifield.eq.ifld_tlsr)then
        qvol = signls(ix,iy,iz,e)
      endif

      call limit_cls(ix,iy,iz,e)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      integer e

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if(ifield.eq.ifld_clsr)then
        temp = t(ix,iy,iz,e,ifld_cls-1)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      real xx,yy,rad,zz
      real heaviside

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      common /dimen/ gfac
      real gfac

      e = gllel(eg)

      ux = 0.0
      uy = 0.0
      uz = 0.0

      rad = 0.25 * gfac
      xx = xm1(ix,iy,iz,e)
      yy = ym1(ix,iy,iz,e)
      zz = zm1(ix,iy,iz,e)

      temp = sqrt(xx**2.0 + yy**2.0 + zz**2.0) - rad
      
      if(ifield.eq.ifld_tls)then
        continue
      elseif(ifield.eq.ifld_tlsr)then
        continue
      elseif(ifield.eq.ifld_cls)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
      elseif(ifield.eq.ifld_clsr)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real xx,yy,deltael,eps,temp
      integer i,ntot

      integer ntlsr, nclsr

      if(istep.eq.0)call outfld('  ')

      ntlsr = uparam(1)
      nclsr = uparam(2)

      ! if(istep.gt.0)then
        !This call invokes the external solver for 
        !advancing specified field
        ! call ls_drive(ifld_clsr)
        ! call ls_drive(ifld_tlsr,1)
        call LS_default_driver(ntlsr,nclsr)
      ! endif

      ! if(istep.eq.nsteps)then
      !   call out_normals
      ! endif
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none

      include 'SIZE'
      include 'TOTAL'

      ifflow = .false.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      common /dimen/ gfac
      real gfac

      integer ntot

      ntot = lx1*ly1*lz1*nelt

      ifld_cls = 2
      ifld_tls = 3
      ifld_clsr = 4
      ifld_tlsr = 5

      gfac = 1 !0.001
      call cmult(xm1,gfac,ntot)
      call cmult(ym1,gfac,ntot)
      call cmult(zm1,gfac,ntot)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'AVM'
      include 'SVV'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real eps
      integer ifdebug, ifixCLSbdry
      
      !Note - the normals in the cls re-distancing equation
      !are taken from the ifld_tls field
      eps = 1.0/(lx1-1.0)
      ifdebug = 0
      ifixCLSbdry = 0
      call ls_init(ifld_cls, ifld_clsr,
     $             ifld_tls, ifld_tlsr,
     $             eps, ifdebug, ifixCLSbdry)

c---------------------------------------------------      
c     This section to specify user defined parameters
c     for AVM/SVV. Leave commented to use default parameters
c     parameters. 

      !fluid

      svv_c0(1) = 1.0

      svv_c0(ifld_cls) = 2.0                 !ifld_cls
      ! svvcut(ifld_cls) = (lx1-1.0)/2.0-1.0
      ! svv_k0(1) = 1.5
      ! svv_k1(1) = 1.5
      ! ifnlsvv(1) = .true.

      ! avm_c1(1) = 1.0
      ! avm_ncut(1) = 1.0
      ! icont(1) = .false.
      ifupwindsvv(ifld_cls) = .true.

c     scalar 2      
      svv_c0(ifld_tls) = 2.0                  !ifld_tls
      ! svvcut(ifld_tls) = (lx1-1.0)/2.0-1.0
      ! svv_k0(2) = 1.5
      ! svv_k1(2) = 1.5
      ! ifnlsvv(2) = .false.
      ifupwindsvv(ifld_tls) = .true.

c     scalar 3      
      svv_c0(ifld_clsr) = 2.0                  !ifld_clsr
      ! svvcut(ifld_clsr) = (lx1-1.0)/2.0-1.0
      ! svv_k0(3) = 1.5
      ! svv_k1(3) = 1.5
      ! ifnlsvv(3) = .false.
      ! ifupwindsvv(ifld_clsr) = .true.

c     scalar 3      
      svv_c0(ifld_tlsr) = 2.0                  !ifld_tlsr
      svvcut(ifld_tlsr) = (lx1-1.0)/2.0-1.0
      ! svv_k0(4) = 1.5
      ! svv_k1(4) = 1.5
      ! ifnlsvv(4) = .false.
      ! ifupwindsvv(ifld_tlsr) = .true.
c--------------------------------------------------
      return
      end
c---------------------------------------------------------------------
      subroutine out_normals
      implicit none
      include "SIZE"
      include "TOTAL"
      include "LVLSET"

      call outpost(clsnr,clsns,clsnt,pr,t,'cls')

      return
      end

