      include "experimental/lvlSet.f"
      include "lineplot.f"
      include "experimental/lserrors.f"
      
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      integer ix,iy,iz,eg,e
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'SPECIES'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real Re, We, Fr, rhoratio, muratio
      real udim, charl, rhol, mul, gdim, gamm
      real nul, nug
      real rhog,mug
      real psi
      integer icalld
      save icalld
      data icalld /0/

      common /dimen/ Re,We,Fr
      real Sc, Pe

      e = gllel(eg)

!     These routine is not called by external solver
!     To Do: change the flow, so that this routine is called
!     similar to RANS. Will avoid confusion

      charl = 0.01
      gdim = 9.81
      rhol = 998.2
      rhog = 1.122
      mul = 1e-3
      mug = 1.824e-5 !/5.0

      diffl = 0.2 * 1e-4
      diffg = 1.0 * 1e-4

      udim = diffl / charl !diffusive scaling

      Sc = mul/rhol/diffl  !Schmidt number
      He = 3.0             !Henry law He=cg/cl

      diffg = diffg/diffl
      diffl = diffl/diffl

      Re = rhol*udim*charl/mul
      Pe = Re * Sc
      Fr = udim**2.0/(gdim*charl)
      gamm = 0.06
      We = charl*rhol*udim**2.0/gamm

      psi = t(ix,iy,iz,e,ifld_cls-1)
      psi = max(0.0,psi)
      psi = min(1.0,psi)
      if(ifield.eq.1)then
        utrans = ((1.0-psi)*rhog + psi*rhol)/rhol
        udiff = ((1.0-psi)*mug + psi*mul)/mul/Re
        if(istep.le.2)then
          vtrans0(ix,iy,iz,e) = utrans
        else
          vtrans0(ix,iy,iz,e) = rhog/rhol
        endif
      elseif(ifield.eq.6)then
        utrans = 1.0
        udiff = ((1.0-psi)*diffg + psi*diffl)/Pe
      else
        utrans = 1.0
        udiff = 1e-10
        if(ifavm(ifield-1))then
          udiff = 1e-10       !must be tiny for hyperbolic
        elseif(ifsvv(ifield-1))then
          udiff = 1e-10      !must be tiny for hyperbolic
        endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /dimen/ Re,We,Fr
      real Re,We,Fr
      real sfx,sfy,sfz

      real svvx,svvy,svvz

      e = gllel(eg)

      sfx = 0.0
      sfy = 0.0
      sfz = 0.0
      svvx = 0.0
      svvy = 0.0
      svvz = 0.0

      call surfacetension(ix,iy,iz,e,1./We,sfx,sfy,sfz)
      
      call svv_fluid(ix,iy,iz,e,svvx,svvy,svvz)

      ffx = sfx + svvx
      ffy = sfy -1./Fr + svvy
      ffz = sfz

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      
      real speciesSrc

      e = gllel(eg)
      
      qvol = 0.0
      avol = 0.0

      call limit_cls(ix,iy,iz,e)

      if(ifield.eq.6)then
        qvol = speciesSrc(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer e
      real yplus

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      if(ifield.eq.ifld_clsr)then
        temp = t(ix,iy,iz,e,ifld_cls-1)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real xx,yy,heaviside
      real phix,phiy

      e = gllel(eg)

      xx = xm1(ix,iy,iz,e)
      yy = ym1(ix,iy,iz,e)

      ux = 0.0
      uy = 0.0
      uz = 0.0

      phiy = 0.5 - yy
      temp = phiy
      if(ifield.eq.ifld_tls .or. ifield.eq.ifld_tlsr)then
        continue
      elseif(ifield.eq.ifld_cls .or. ifield.eq.ifld_clsr)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
      elseif(ifield.eq.6)then
        temp = heaviside(ix,iy,iz,e,temp,0.0)
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      real ntlsr, nclsr
      real pta(3),ptb(3)

      integer ntot,i

      integer pord

      real plttime(4)
      integer plti
      save plti 
      data plti /1/

      ntot = lx1*ly1*lz1*nelv

      pord = uparam(3)
      call extrappr(prext,pr,prlag(1,1,1,1,1),prlag(1,1,1,1,2),pord)

      ntlsr = uparam(1) !freq of TLS re-distancing
      nclsr = uparam(2) !freq of CLS re-distancing

      call LS_default_driver(ntlsr,nclsr)

      plttime(1) = 0.0
      plttime(2) = 0.05
      plttime(3) = 0.2
      plttime(4) = 0.8

      if(time * 5.0 .ge. plttime(plti) .and. plti.le.4)then
        pta(1) = 0.5
        pta(2) = 0.0
        pta(3) = 0.0
        ptb(1) = 0.5
        ptb(2) = 1.0
        ptb(3) = 0.0

        call lineplot(pta,ptb,1001)

        plti = plti+1
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      ifld_cls = 2
      ifld_tls = 3
      ifld_clsr = 4
      ifld_tlsr = 5

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'SVV'
      include 'AVM'

      real eps,dt_cls_in,dt_tls_in
      integer nsteps_cls, nsteps_tls

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr
      integer ifdebug, ifixCLSbdry
      real farfield

      eps = 1.0/(lx1-1.0)
      ifdebug = 0
      ifixCLSbdry = 0
      farfield = 0.0
      call ls_init(ifld_cls, ifld_clsr,
     $             ifld_tls, ifld_tlsr,
     $             eps, ifdebug, ifixCLSbdry,farfield)

c---------------------------------------------------      
c     This section to specify user defined parameters
c     for AVM/SVV. Leave commented to use default parameters
c     parameters. 

      !fluid
      svv_c0(1) = 1.0
      svvcut(1) = (lx1-1.0)/2.0

      ! svv_c0(ifld_cls) = 1.0                 !ifld_cls
      ! svvcut(ifld_cls) = (lx1-1.0)/2.0-1.0
      ! svv_k0(1) = 1.5
      ! svv_k1(1) = 1.5
      ! ifnlsvv(1) = .true.

      ! avm_c1(1) = 1.0
      ! avm_ncut(1) = 1.0
      ! icont(1) = .false.
      ! ifupwindsvv(ifld_cls) = .true.

c     scalar 2      
      ! svv_c0(ifld_tls) = 1.0                  !ifld_tls
      ! svvcut(ifld_tls) = (lx1-1.0)/2.0-1.0
      ! svv_k0(2) = 1.5
      ! svv_k1(2) = 1.5
      ! ifnlsvv(2) = .false.
      ! ifupwindsvv(ifld_tls) = .true.

c     scalar 3      
      svv_c0(ifld_clsr) = 1.0                  !ifld_clsr
      svvcut(ifld_clsr) = (lx1-1.0)/2.0
      ! svv_k0(3) = 1.5
      ! svv_k1(3) = 1.5
      ! ifnlsvv(3) = .false.
      ! ifupwindsvv(ifld_clsr) = .true.

c     scalar 3      
      svv_c0(ifld_tlsr) = 2.0                  !ifld_tlsr
      svvcut(ifld_tlsr) = (lx1-1.0)/2.0
      if(lx1.gt.7) svvcut(ifld_tlsr) = (lx1-1.0)/3.0
      ! svv_k0(4) = 1.5
      ! svv_k1(4) = 1.5
      ! ifnlsvv(4) = .false.
      ! ifupwindsvv(ifld_tlsr) = .true.


      ifflow = .false.
      
      return
      end
c---------------------------------------------------------------------
      real function speciesSrc(ix,iy,iz,e)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'SPECIES'

      integer ix,iy,iz,e

      common /ls_usr/ ifld_cls,ifld_clsr,
     $                ifld_tls,ifld_tlsr 
      integer ifld_cls,ifld_clsr
      integer ifld_tls,ifld_tlsr

      common /sptemp/ stmp(lx1,ly1,lz1,lelv),
     $                delta(lx1,ly1,lz1,lelv),
     $                spx(lx1,ly1,lz1,lelv),
     $                spy(lx1,ly1,lz1,lelv), 
     $                spz(lx1,ly1,lz1,lelv) 
      real stmp, delta, spx, spy, spz
      real psi
      real term1, term2

      integer i,ntot

      ntot = lx1*ly1*lz1*nelt 

      if(ix*iy*iz*e .eq. 1)then
        do i=1,ntot
          psi = t(i,1,1,1,ifld_cls-1)
          psi = max(0.0,psi)
          psi = min(1.0,psi)
          term1 = diffl - diffg
  
          term2 = (diffl - He*diffg)/(psi + He*(1.0-psi))
          stmp(i,1,1,1) = term1 - term2
        enddo
        call col2(stmp, t(1,1,1,1,5),ntot)

        call deltals(t(1,1,1,1,ifld_cls-1),delta)
        call cls_normals(spx,spy,spz,ifld_tls)

        call col4(spx,spx,delta,stmp,ntot)
        call col4(spy,spy,delta,stmp,ntot)
        call col4(spz,spz,delta,stmp,ntot)

        call opdiv(spdiv,spx,spy,spz)
        call dssum(spdiv,lx1,ly1,lz1)
        call col2(spdiv,binvm1,ntot)
      endif

      speciesSrc = spdiv(ix,iy,iz,e)

      return
      end
