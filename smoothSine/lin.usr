      include "experimental/lvlSet.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      integer ix,iy,iz,eg,e
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      e = gllel(eg)

      utrans = 1.0
      udiff = 1e-32

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      e = gllel(eg)
      
      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      integer ix,iy,iz,eg,e

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      real x1

      e = gllel(eg)

      ux = 1.0
      uy = 0.0
      uz = 0.0

      !     Initializes Level-set contour field
      x1 = xm1(ix,iy,iz,e)
      temp = sin(PI*x1)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /errs/ exact(lx1,ly1,lz1,lelt),
     $              err(lx1,ly1,lz1,lelt)
      real exact,err
      real er

      integer ntot
      real glsc3, glmin, glmax
      real emin,emax

      ntot = lx1*ly1*lz1*nelt

      if(istep.eq.0)then
        call outfld('  ')
      endif

      if(mod(istep,10000).eq.0)then
        call getexact(exact)

        call sub3(err,t(1,1,1,1,1),exact,ntot)
        er = glsc3(err,err,bm1,ntot)/VOLVM1
        er = sqrt(er)
        if(nio.eq.0)write(*,*)"SC1: ",er

        call sub3(err,t(1,1,1,1,2),exact,ntot)
        er = glsc3(err,err,bm1,ntot)/VOLVM1
        er = sqrt(er)
        if(nio.eq.0)write(*,*)"SC2: ",er

        call sub3(err,t(1,1,1,1,3),exact,ntot)
        er = glsc3(err,err,bm1,ntot)/VOLVM1
        er = sqrt(er)
        if(nio.eq.0)write(*,*)"SC3: ",er

        call sub3(err,t(1,1,1,1,4),exact,ntot)
        er = glsc3(err,err,bm1,ntot)/VOLVM1
        er = sqrt(er)
        if(nio.eq.0)write(*,*)"SC4: ",er

        call sub3(err,t(1,1,1,1,5),exact,ntot)
        er = glsc3(err,err,bm1,ntot)/VOLVM1
        er = sqrt(er)
        if(nio.eq.0)write(*,*)"SC5: ",er
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none

      include 'SIZE'
      include 'TOTAL'

      ifflow = .false.
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'AVM'
      include 'SVV'

c---------------------------------------------------      
c     This section to specify user defined parameters
c     for AVM/SVV. Leave commented to use default parameters
c     parameters. 

c     scalar 1 (Temp)     
      ! No regularization

c     scalar 2      
      ! avm_ncut(2) = 1
      ! avm_c1(2) = 1.0

c     scalar 3
      svv_c0(4) = 0.01
      ! svvcut(3) = (lx1-1.0)
      ! ifupwindsvv(3) = .true.

c     scalar 4
      svv_c0(5) = 0.1
      ! svvcut(3) = (lx1-1.0)
      ! ifupwindsvv(3) = .true.

c     scalar 4
      svv_c0(6) = 1.0
      ! svvcut(3) = (lx1-1.0)
      ! ifupwindsvv(3) = .true.

      return
      end
c---------------------------------------------------------------------
      subroutine getexact(exact)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real exact(1)

      integer i,ntot
      real xx

      ntot = lx1*ly1*lz1*nelt

      do i=1,ntot
        xx = xm1(i,1,1,1)
        exact(i) = sin(PI*xx)
      enddo

      return
      end
